
==================== FINAL INTERFACE ====================
2018-09-29 13:41:37.177324982 UTC

interface main:Main 8043
  interface hash: 443afa164af8598f7bb1db6e13614156
  ABI hash: 96f3870bd615176168999047034769db
  export-list hash: c15c4ea5911830fd8e3653751b909b22
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: eee51e8766b1f4c4c42bfb5cd64f32da
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.d
  Main.divisores
  Main.dobra
  Main.fatorial
  Main.fibs
  Main.l
  Main.main
  Main.myLength
  Main.para
  Main.primo
  Main.primos
  Main.primos2
  Main.qsort
  Main.somaUm
  Main.todosPrimos
  Main.Dir{Main.Leste Main.Norte Main.Oeste Main.Sul}
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
95f825fa3a79bb2de6d4d2f6b1c77607
  $tc'Leste :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14352032224626029787##
                   13825689761636780232##
                   Main.$trModule
                   Main.$tc'Leste2
                   0#
                   Main.$tc'Leste1) -}
80f44aa4db7f824c3d6635fed5328532
  $tc'Leste1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
387e58994676be7405cafc8c77d444dc
  $tc'Leste2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Leste3) -}
87aaf13fc013c098cb90ab19b5ce9666
  $tc'Leste3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Leste"#) -}
9bca28b8804ddc7a0d76b72efc57187a
  $tc'Norte :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11606879349516386612##
                   7325719907704537414##
                   Main.$trModule
                   Main.$tc'Norte1
                   0#
                   Main.$tc'Leste1) -}
33bc5a0067e4cc689a8e4dcd78e975c2
  $tc'Norte1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Norte2) -}
a53e15950b9a42a2f526db2add7dbd17
  $tc'Norte2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Norte"#) -}
d4fc8090d22f7ad8f89ae5a646be2647
  $tc'Oeste :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13740947928480866058##
                   14090866414636816219##
                   Main.$trModule
                   Main.$tc'Oeste1
                   0#
                   Main.$tc'Leste1) -}
8bdb9d53ad4cf11fa0080b4660666aa3
  $tc'Oeste1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Oeste2) -}
59750329df986798c9aa02eb38bbe4e4
  $tc'Oeste2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Oeste"#) -}
13123f376dc5959b5aee1ae97d0da88e
  $tc'Sul :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6137249551490621460##
                   5706639963434630068##
                   Main.$trModule
                   Main.$tc'Sul1
                   0#
                   Main.$tc'Leste1) -}
3da687b73fbe99543798bdb966c7fc7a
  $tc'Sul1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Sul2) -}
1d3738e26fcd80ca000421f94e186f24
  $tc'Sul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Sul"#) -}
c5584839218433940f354fe7f0c61b21
  $tcDir :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1925894179874965567##
                   14040523071069404887##
                   Main.$trModule
                   Main.$tcDir1
                   0#
                   GHC.Types.krep$*) -}
9f6c5661b6a4372681c6e877362ddcac
  $tcDir1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcDir2) -}
151715b7b58755b6900bd2441774133d
  $tcDir2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dir"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
0190557838252bbc9142a7c769b9baf6
  $wdivisores :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># 1# ww of lwild {
                   DEFAULT
                   -> letrec {
                        lvl2 :: [GHC.Types.Int]
                        = case ww of wild {
                            DEFAULT -> go 0# -1# -> GHC.Types.[] @ GHC.Types.Int }
                        lvl3 :: [GHC.Types.Int]
                        = GHC.Types.: @ GHC.Types.Int Main.divisores1 lvl2
                        go :: GHC.Prim.Int# -> [GHC.Types.Int]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          case x of wild {
                            DEFAULT
                            -> case GHC.Classes.modInt# ww wild of ww2 {
                                 DEFAULT
                                 -> case GHC.Prim.==# wild ww of lwild1 {
                                      DEFAULT -> go (GHC.Prim.+# wild 1#)
                                      1# -> GHC.Types.[] @ GHC.Types.Int }
                                 0#
                                 -> GHC.Types.:
                                      @ GHC.Types.Int
                                      (GHC.Types.I# wild)
                                      (case GHC.Prim.==# wild ww of lwild1 {
                                         DEFAULT -> go (GHC.Prim.+# wild 1#)
                                         1# -> GHC.Types.[] @ GHC.Types.Int }) }
                            -1# -> lvl3
                            0# -> case GHC.Real.divZeroError ret_ty [GHC.Types.Int] of {} }
                      } in
                      go 1#
                   1# -> GHC.Types.[] @ GHC.Types.Int }) -}
24fd3bef56a4526239e43afb6ea643bc
  $wprimos :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.># 1# ww of lwild {
                   DEFAULT
                   -> letrec {
                        go :: GHC.Prim.Int# -> [GHC.Types.Int]
                          {- Arity: 1, Strictness: <S,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          let {
                            ds :: GHC.Types.Int = GHC.Types.I# x
                          } in
                          case GHC.Classes.$fEq[]_$s$c==
                                 (Main.$wdivisores x)
                                 (GHC.Types.:
                                    @ GHC.Types.Int
                                    Main.primo1
                                    (GHC.Types.:
                                       @ GHC.Types.Int
                                       ds
                                       (GHC.Types.[] @ GHC.Types.Int))) of wild {
                            GHC.Types.False
                            -> case GHC.Prim.==# x ww of lwild1 {
                                 DEFAULT -> go (GHC.Prim.+# x 1#)
                                 1# -> GHC.Types.[] @ GHC.Types.Int }
                            GHC.Types.True
                            -> GHC.Types.:
                                 @ GHC.Types.Int
                                 ds
                                 (case GHC.Prim.==# x ww of lwild1 {
                                    DEFAULT -> go (GHC.Prim.+# x 1#)
                                    1# -> GHC.Types.[] @ GHC.Types.Int }) }
                      } in
                      go 1#
                   1# -> GHC.Types.[] @ GHC.Types.Int }) -}
7ff8e83f17e015bfa4b772ad27748d09
  $wprimos2 :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 let {
                   n :: [GHC.Types.Int]
                   = case GHC.Prim.># 1# ww of lwild {
                       DEFAULT
                       -> letrec {
                            go :: GHC.Prim.Int# -> [GHC.Types.Int]
                              {- Arity: 1, Strictness: <S,U> -}
                            = \ (x :: GHC.Prim.Int#) ->
                              let {
                                x1 :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.*# 6# x) 1#
                              } in
                              case GHC.Prim.<=# x1 ww of lwild1 {
                                DEFAULT
                                -> case GHC.Prim.==# x ww of lwild2 {
                                     DEFAULT -> go (GHC.Prim.+# x 1#)
                                     1# -> GHC.Types.[] @ GHC.Types.Int }
                                1#
                                -> GHC.Types.:
                                     @ GHC.Types.Int
                                     (GHC.Types.I# x1)
                                     (case GHC.Prim.==# x ww of lwild2 {
                                        DEFAULT -> go (GHC.Prim.+# x 1#)
                                        1# -> GHC.Types.[] @ GHC.Types.Int }) }
                          } in
                          go 1#
                       1# -> GHC.Types.[] @ GHC.Types.Int }
                 } in
                 case GHC.Prim.># 1# ww of lwild {
                   DEFAULT
                   -> letrec {
                        go :: GHC.Prim.Int# -> [GHC.Types.Int]
                          {- Arity: 1, Strictness: <S,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          let {
                            x1 :: GHC.Prim.Int# = GHC.Prim.-# (GHC.Prim.*# 6# x) 1#
                          } in
                          case GHC.Prim.<=# x1 ww of lwild1 {
                            DEFAULT
                            -> case GHC.Prim.==# x ww of lwild2 {
                                 DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> n }
                            1#
                            -> GHC.Types.:
                                 @ GHC.Types.Int
                                 (GHC.Types.I# x1)
                                 (case GHC.Prim.==# x ww of lwild2 {
                                    DEFAULT -> go (GHC.Prim.+# x 1#) 1# -> n }) }
                      } in
                      go 1#
                   1# -> n }) -}
b9ac6643b0451c1d35b2b0bbdeb67daa
  data Dir = Norte | Sul | Leste | Oeste
0f30fec669f31205d9a11909b864c691
  d :: [GHC.Integer.Type.Integer]
  {- Unfolding: (Main.d_go Main.d1) -}
8015d447e5877ff06cc529ee6e16e1a3
  d1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
da43234f40b58b98632dd0be39ad12ef
  d_go :: GHC.Integer.Type.Integer -> [GHC.Integer.Type.Integer]
  {- Arity: 1, Strictness: <S,U> -}
4de341e0a0e1bee255258575d502c9ce
  divisores :: GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wdivisores ww1 }) -}
e0fd9f177ed428107d868cd58f787f43
  divisores1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
2b2233efd35e8e096445195bb2af642d
  dobra :: GHC.Num.Num a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLL),U(A,A,1*C1(C1(U)),A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) ->
                 GHC.Num.*
                   @ a
                   $dNum
                   (GHC.Num.fromInteger @ a $dNum Main.dobra1)
                   x) -}
c406299c278dfec339ddea13e32fffd9
  dobra1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
6fd8569d6b17488f9bd8af86299bbdc5
  fatorial :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Integer.Type.Integer) ->
                 Main.fatorial_fatorial' n Main.d1) -}
aae40f2ae28e78d1d053073f921acf44
  fatorial_fatorial' ::
    GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
  {- Arity: 2, Strictness: <S,U><S,1*U> -}
6b6eb33e10e85edaad1549b8babcc2c0
  fibs :: [GHC.Integer.Type.Integer]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.d1
                   Main.fibs1) -}
78efe179538b17e8eec1116f5ff388e4
  fibs1 :: [GHC.Integer.Type.Integer]
  {- Unfolding: (Main.fibs2
                   @ [GHC.Integer.Type.Integer]
                   (GHC.Types.: @ GHC.Integer.Type.Integer)
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
e55da1b1756beedf9add4491178047e3
  fibs2 :: (GHC.Integer.Type.Integer -> b1 -> b1) -> b1 -> b1
  {- Arity: 2, Strictness: <L,C(C1(U))><L,U> -}
25167b139b40f45fc4adb41012ce6de4
  l :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l17
                   Main.l1) -}
1d2ea865c0c072973811cb9b4942622e
  l1 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l16
                   Main.l2) -}
dd1b83be45445a51731c925bc213a977
  l10 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
07184ed5d5af98ee8c705735761fa290
  l11 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
8f63fae3fb95dcdfba146537dbd1342a
  l12 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (4) -}
a1ee22a6bd9ec8ab3658eb55fe19e189
  l13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (6) -}
32e21e3bb7a93b09c58978712b5cdea3
  l14 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (7) -}
be46ef21e6dc1e141c049f3506e011c8
  l15 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (8) -}
74719fb7d36a9439ea389d4835ed5b3a
  l16 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (9) -}
f0620455a8e205e06f82ed80b0a00532
  l17 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
1a3cd3e70316db994a03776dd63b45fa
  l2 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l15
                   Main.l3) -}
3f3f6aade825b60b0dd58eafccc31f08
  l3 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l14
                   Main.l4) -}
4c918e643008f2ed03280579c5f6571d
  l4 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l13
                   Main.l5) -}
cb47310ee26cef7348461aeaf191b235
  l5 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l12
                   Main.l6) -}
0030b1c2227159106e18a6593acb1462
  l6 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l11
                   Main.l7) -}
4846c896ca24ed26f49310380149f1c2
  l7 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.dobra1
                   Main.l8) -}
3e77cef1b4ba46f5d73b829682db6b0f
  l8 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.d1
                   Main.l9) -}
71df13a50af700bb7f4106b70392d1c8
  l9 :: [GHC.Integer.Type.Integer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Integer.Type.Integer
                   Main.l10
                   (GHC.Types.[] @ GHC.Integer.Type.Integer)) -}
019340907f962cdf9f4efc1a5dcf40a4
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
849443db745b98031e5448647a93f54c
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
279c978f793e047d51e01b795abce891
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
80494ff25aec3ca8c8a0188b6f90c0c3
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hello world"#) -}
73e06be1165cfe1316793b7f56177618
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
d1f76c6d8c2d6813f2aa2417e855fd06
  myLength :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild {
                   [] -> Main.myLength1
                   : ipv ipv1
                   -> letrec {
                        go :: [a] -> GHC.Types.Int -> GHC.Types.Int <join 2> {- Arity: 2 -}
                        = \ (ds1 :: [a]) (eta :: GHC.Types.Int) ->
                          case ds1 of wild1 {
                            [] -> eta
                            : y ys
                            -> go
                                 ys
                                 (case eta of wild2 { GHC.Types.I# x ->
                                  GHC.Types.I# (GHC.Prim.+# x 1#) }) }
                      } in
                      go wild Main.myLength1 }) -}
c945a789a86de221cd08b198e8f66a97
  myLength1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
049123bf55b49dbefc631d8d54ee5912
  para ::
    Main.Dir
    -> (GHC.Types.Int, GHC.Types.Int) -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U(U),U(U))>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Dir) (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case w of wild {
                   Main.Norte
                   -> (ww1,
                       case ww2 of wild1 { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1#) })
                   Main.Sul
                   -> (ww1,
                       case ww2 of wild1 { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.-# x 1#) })
                   Main.Leste
                   -> (case ww1 of wild1 { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1#) },
                       ww2)
                   Main.Oeste -> Main.para1 } }) -}
dc942c6eb7cabd9ea043b31d780e2816
  para1 :: (GHC.Types.Int, GHC.Types.Int)
  {- Strictness: x -}
ca0de2e0c7c19d4e5a0e2ad9c5423977
  primo :: GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (n :: GHC.Types.Int) ->
                 GHC.Classes.$fEq[]_$s$c==
                   (Main.divisores n)
                   (GHC.Types.:
                      @ GHC.Types.Int
                      Main.primo1
                      (GHC.Types.: @ GHC.Types.Int n (GHC.Types.[] @ GHC.Types.Int)))) -}
18ef5b84ca74f3a84973f41512be08d4
  primo1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
754d1e9b39e47c1fac09175ca4a03803
  primos :: GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wprimos ww1 }) -}
0fe1ae2c36cca229e6183b4e4395f736
  primos2 :: GHC.Types.Int -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wprimos2 ww1 }) -}
1a2c812a8e76dadef84a42e4dda494d0
  qsort :: GHC.Classes.Ord a => [a] -> [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U> -}
8ce03f1f11834732c23e91a6da27aacd
  somaUm :: GHC.Num.Num a => a -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),U(1*C1(C1(U)),A,A,A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) ->
                 GHC.Num.+ @ a $dNum x (GHC.Num.fromInteger @ a $dNum Main.d1)) -}
c468f606620e1fd1a6e5f4388df47f03
  todosPrimos :: [GHC.Types.Int]
  {- Unfolding: (Main.todosPrimos_go 1#) -}
92e1757e22db5c0f78ed33a4d550ad12
  todosPrimos_go :: GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

